use pirates;
db.dropDatabase();

db.lessons.insert({
  question: "make a greetings for captain jack by touching the buttons in the right order ", answers: [
    "function captainJackGreeting(name){", 'return "Arrgh " + name + ", come aboard";}', 'captainJackGreeting("Joe")'
  ],story: "Joe has just left Pirate School and is looking for a ship to join to sail the seven sea's looking for booty and treasure. Luckily Joe spotted a ship with a large skull and cross bones and walked to the ship. The ships pirates were running about when the ships robot capatin jack walked to the edge of the ship. Captain Jack lost some of his coding that makes him work while fighting Rumbo the Kracken. Do you think you can write the code to make Captain Jack the best Pirate of Pirateland? Pirate Joe thinks you can, lets begin by getting Captain Jack talking to people again by coding a greeting for Captain Jack: ",result: "Arrgh Joe, come aboard", learning:"In this lesson we will be looking at how to make a function so that Captain Jack can say hello to people. Imagine if we had to type in “Hello Pirate Joe” every time Captain Jack saw Pirate Joe on the ship. That would take up far too much time, so we can write a function that Captain Jack can call to say hello to people. Functions begin by putting function then what we want to call the function for example function sayHello(). The brackets on the are there in case you want the function to use what's in the brackets when it's doing its thing, we will see some examples of this later on. The next thing we put is what we want our function to do. What that would look like in our say hello function is return Hello. The return part tells the computer what we want to return and the part in the inverted commas is what we want to say. Lastly we get our function to do something by putting its name and that lets the function know to do it's things for example: function sayHello (){return hello}. sayHello () would output hello. If we wanted to use sayHello with somebody name we would put the name in the brackets of what we want to use. function sayHello (name){return hello + name} when called sayHello(Jack) would output hello Jack"});

db.lessons.insert({
  question: "make a function   so that Captain Jack can add the 6 gold coins he found and the 7 gold coins Pirate Joe found together.", answers: ['function addGoldCoins(CaptainJacksGold, PirateJoesGold){', 'return CaptainJacksGold + PirateJoesGold + " Gold Coins"', 'addGoldCoins(6, 7)'], story: "After landing on OopyLoopy Island, Captain Jack and Pirate Joe decided to split up and find as many gold coins as possible. The two pirate meet back up and Captain Jack would like to add their gold together so he can add it to the chest on the ship.", result: "13 Gold Coins", learning:"We have already seen how to write a function so let's see what that will look like if we wanted to pass mores than one thing into the function. We would again begin with function subtractTwoNumbers(number1, number2){return number1 - number2}. So subtractTwoNumbers(5,3) would output 2"});

db.lessons.insert({
  question: "make a function that lets Captain Jack and Pirate Joe to rejoin the Swally Galley",
  answers: ['const ship = ["Blackbeard", "Scurvy Legs", "Billy Bones"]', 'ship.push("Captain Jack")', "ship.push(' Pirate Joe')", "p ship"], story: "After successfully finding gold coins on OopyLoopy Island Captain Jack and Pirate Joe make their way back to the ship to add their gold to the pirate treasure chest.", result: '[Blackbeard", "Scurvy Legs", "Billy Bones", "Captain Jack", "Pirate Joe"]', learning:"In this question we will be using something called an Array, sounds like Barry without the b. Arrays are what we can use to store lots of things, such as people's names, different numbers people's mobile numbers. The list goes on. We do this so we don't need to remember everything thing when we type out things and so that if we need to do a function on everything in the array we can give the function the array of things rather than all the individual bits one at a time. We begin by writing const and then what we want to call our array for example: const pirates. We then write what pirates is equal to and stick everything we want inside some square brackets that look like this [ ]. Lastly we put what we want inside: Const pirates = [`Salty Sam`, `Bad Barry`, `Jolly Joe`]. We can then add things to the array by pushing things into it. Just imagine pushing another sandwich into you lunch box to eat, we can do the same with arrays. To do this we take our array pirates and if we wanted to add `Parrot Tara` we would do:pirates.push (`Parrot Tara`). Now pirates looks like this pirates = [`Salty Sam`, `Bad Barry`, `Jolly Joe`, `Parrot Tara`]"});

db.lessons.insert({
  question:"Make a function so that Captain Jack can add up all the gold in the treasure chest with const chest=[13, 4, 3, 4, 1]",
  answers: ['function countPirateGold(chest)', 'total = 0', 'for(treasure of chest){','total = total + treasure}','return total}', 'countPirateGold(chest)'],
  story: "After rejoining the Swally Galley, Captain Jack takes the 13 gold he and Pirate Joe found and placed it in the ships chest. While Captain Jack is there he wants to count all of the gold to make sure no one is stealing any gold.",
  result: '25', learning:"No we have learned about arrays and functions a wee bit, we can show you how to use arrays in functions. Say we had an array of all our friends pocket money: Const pocketMoney = [ 5, 6, 10, 9].And we wanted to add all money to see how much pocket money your friends have. What we can do is write a function that loops through all the money and adds the amount to the total and then returns the total. We begin by writing a function with a name passing it the array: function countPocketMoney(pocketMoney){. We then need to set a total = 0 to begin with function countPocketMoney(pocketMoney){ total = 0. Then using a loop to loop over the things in the array and add them to total. We do this using the word for:  for( money of pocketMoney){total = total + money}. This gets each amount of money from pocket money and the total and adds the money to it. Lastly we return the total so we can see how much money we have. All together looking like: function countPocketMoney(pocketMoney){total = 0 for( money of pocketMoney){total = total + money} return total. So countPocketMoney(pocketMoney) would output £30"});
